/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.interprogteam2017.mvc.views;

import com.interprogteam2017.dbconnect.DBConnect;
import com.interprogteam2017.mvc.RestaurantMVC;
import com.interprogteam2017.mvc.models.TransactionModel;
import dataStorageModel.User;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author OElA
 */
public class restInfoView extends javax.swing.JFrame {

    static User u;
    static HashMap<String, User> h;
    static boolean edit;
    static RestaurantMVC restMVC;

    public static void start(User a, HashMap<String, User> h, RestaurantMVC r) {

        new restInfoView().setVisible(true);
        restInfoView.u = a;
        restInfoView.h = h;
        restMVC = r;

    }

    public static void start(User u) {
        new restInfoView().setVisible(true);
        restInfoView.u = u;

    }

    public static void edit(User u) {
        new restInfoView().setVisible(true);
        edit = true;

    }

    /**
     * Creates new form restInfoView
     */
    public restInfoView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addressField = new javax.swing.JTextArea();
        doneBtn = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 51));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Restaurant Name");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Make Your Restaurant");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Restaurant Address");

        addressField.setColumns(20);
        addressField.setRows(5);
        jScrollPane1.setViewportView(addressField);

        doneBtn.setText("Done");
        doneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(doneBtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(nameField))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(doneBtn)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneBtnActionPerformed

        if (!edit) {
            if (!nameField.getText().equals("") && !addressField.getText().equals("")) {

                String name = nameField.getText();
                u.restName = name;
                String address = addressField.getText();
                DBConnect database = new DBConnect();
                Statement st = null;
                String insert = "INSERT INTO `crave`.`restaurant` (`Name`, `Address`) VALUES ('" + name + "', '" + address + "')";
                try {
                    st = database.getStatement();
                    st.executeUpdate(insert);
                } catch (SQLException ex) {
                    Logger.getLogger(TransactionModel.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Restaurant " + name + " succesfully opened");
                u.hasRest = true;

                int idNum;
                insert = "SELECT id FROM crave.restaurant where Name = '" + name + "' and Address = '" + address + "'";
                try {
                    ResultSet r = st.executeQuery(insert);
                    while (r.next()) {
                        idNum = r.getInt("id");
                        u.restID = idNum;
                    }
                    r.close();
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(restInfoView.class.getName()).log(Level.SEVERE, null, ex);
                }
                h = readAgain();
                System.out.println(u.hasRest + " " + u.restID + " " + u.restName);
                h.put(u.getUsername(), u);
                writeAll(h);
                dispose();
                System.out.println(u.getUsername());
                try {
                    restMVC.start(u);
                } catch (Exception e) {
                }
                edit = true;
            } else {
                JOptionPane.showMessageDialog(this, "Fill in all fields first");
            }

        } else {
            if (!nameField.getText().equals("") && !addressField.getText().equals("")) {

                String name = nameField.getText();
                u.restName = name;
                String address = addressField.getText();
                DBConnect database = new DBConnect();
                Statement st = null;
                String insert = "UPDATE `crave`.`restaurant` SET `Name`='" + name + "', `Address`='" + address + "' WHERE `id`='" + u.restID + "';";
                try {
                    st = database.getStatement();
                    st.executeUpdate(insert);
                } catch (SQLException ex) {
                    Logger.getLogger(TransactionModel.class.getName()).log(Level.SEVERE, null, ex);
                }

                h = readAgain();
                h.put(u.getUsername(), u);
                writeAll(h);
                dispose();

            } else {
                JOptionPane.showMessageDialog(this, "Fill in all fields first");
            }
        }
    }//GEN-LAST:event_doneBtnActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(restInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(restInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(restInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(restInfoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new restInfoView().setVisible(true);
            }
        });
    }

    private void writeAll(HashMap<String, User> h) {
        try {
            FileOutputStream fo = new FileOutputStream("userlist.txt");
            ObjectOutputStream output = new ObjectOutputStream(fo);
            output.writeObject(h);
            output.close();
            fo.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea addressField;
    private javax.swing.JButton doneBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    // End of variables declaration//GEN-END:variables

    private HashMap<String, User> readAgain() {
        HashMap h = null;
        try {

            FileInputStream fi = new FileInputStream("userlist.txt");
            ObjectInputStream input = new ObjectInputStream(fi);
            /*
             User u;
             try {
             while (true) {
             u = (User) input.readObject();
             h.put(u.getUsername(), u);
             }
             } catch (Exception e) {
             //e.printStackTrace();
             }*/
            h = (HashMap<String, User>) input.readObject();
            fi.close();
            input.close();

        } catch (Exception e) {
            //e.printStackTrace();
            FileOutputStream fo;
            try {
                fo = new FileOutputStream("userlist.txt");
                //ObjectOutputStream output = new ObjectOutputStream(fo);
            } catch (Exception ex) {
                //Logger.getLogger(SignUpModel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        return h;
    }
}
